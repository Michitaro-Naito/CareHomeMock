@model CareHomeMock.Models.StaticPage

@{
    ViewBag.Title = "Edit";
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/tinymce/tinymce.min.js"></script>
    <script>
        tinymce.init({
            selector: "textarea",
            theme: "modern",
            plugins: [
                "advlist autolink lists link image charmap print preview hr anchor pagebreak",
                "searchreplace wordcount visualblocks visualchars code fullscreen",
                "insertdatetime media nonbreaking save table contextmenu directionality",
                "emoticons template paste textcolor colorpicker textpattern"
            ],
            toolbar1: "insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image",
            toolbar2: "print preview media | forecolor backcolor emoticons",
            image_advtab: true,
            templates: [
                { title: 'Test template 1', content: 'Test 1' },
                { title: 'Test template 2', content: 'Test 2' }
            ],
            extended_valid_elements: "script[language|type|src],a[class|name|href|target|title|onclick|rel]"
        });

        function InsertAsImage(fileName) {
            //tinyMCE.activeEditor.dom.add(tinyMCE.activeEditor.getBody(), 'p', { title: 'my title' }, 'Some content');
            tinyMCE.activeEditor.execCommand('mceInsertContent', false, '<img src="/Files/' + fileName + '" />');
            alert(fileName + 'を画像として挿入しました。');
        }

        function InsertAsFile(fileName) {
            tinyMCE.activeEditor.execCommand('mceInsertContent', false, '<a href="/Files/' + fileName + '" target="_blank">' + encodeURIComponent(fileName) + '</a>');
            alert(fileName + 'をファイルとして挿入しました。');
        }

        $(document).ready(function () {

            function AppModel() {
                var s = this;

                s.OpenFileIndex = function () {
                    window.open('/File', 'FileIndexWindow');
                }
            }

            var model = new AppModel();
            ko.applyBindings(model);

        });
    </script>
}



<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>StaticPage</h4>
        <hr />
        @Html.ValidationSummary(true)
        @Html.HiddenFor(model => model.StaticPageId)
        @Html.HiddenFor(model => model.Created)
        @Html.HiddenFor(model => model.Updated)

        <div class="form-group">
            @Html.LabelFor(model => model.Order, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Order)
                @Html.ValidationMessageFor(model => model.Order)
            </div>
        </div>

        @MyHelper.CheckBoxFor(Html, m => m.NotListed)

        <div class="form-group">
            @Html.LabelFor(model => model.Title, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title)
                @Html.ValidationMessageFor(model => model.Title)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Html, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Html)
                @Html.ValidationMessageFor(model => model.Html)
                <button type="button" data-bind="click: OpenFileIndex" class="btn btn-default">ファイル管理</button>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
