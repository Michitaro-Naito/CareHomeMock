@helper HelperName(string name) {
    // たとえば、ヘルパーにはコードまたはマークアップ (あるいはその両方) を使用できます。
    // var msg = "ハロー " + name;
    // <p>@msg</p>
    // 詳細については、http://go.microsoft.com/fwlink/?LinkID=204658 を参照してください
}

@helper Foo()
{
    <span>Foo!</span>
}

@using System.Web.Mvc;
@using System.Web.Mvc.Html;
@using System.Linq.Expressions;
@using CareHomeMock.Helper;
@functions
{
    public enum EditorType
    {
        TextBox,
        TextArea,
        DropDownList,
        Raty,
        Date
    }

    public static HelperResult DisplayFor<TModel, TItem>(HtmlHelper<TModel> html, Expression<Func<TModel, TItem>> expr)
    {
        var label = html.LabelFor(expr, new { @class = "control-label col-md-2" });
        var display = html.DisplayFor(expr);
        var description = "";
        var hidden = html.HiddenFor(expr);
        return TheThingToDisplay(label, display, description, hidden);
    }

    public static HelperResult DisplayFor<TModel, TItem>(HtmlHelper<TModel> html, Expression<Func<TModel, TItem>> expr, string displayText)
    {
        var label = html.LabelFor(expr, new { @class = "control-label col-md-2" });
        var description = "";
        var hidden = html.HiddenFor(expr);
        return TheThingToDisplayText(label, displayText, description, hidden);
    }

    public static HelperResult CheckBoxFor<TModel>(HtmlHelper<TModel> html, Expression<Func<TModel, bool>> expr)
    {
        // Gets property name.
        var propertyName = expr.GetPropertyName();

        // Gets description and placeholder.
        var description = "";
        var placeholder = "";
        bool readOnly = false;
        var displayAttr = (System.ComponentModel.DataAnnotations.DisplayAttribute)Attribute.GetCustomAttribute(typeof(TModel).GetProperty(propertyName), typeof(System.ComponentModel.DataAnnotations.DisplayAttribute));
        if (displayAttr != null)
            description = displayAttr.Description;
        var detailedAttr = (CareHomeMock.Helper.DetailedDisplayAttribute)Attribute.GetCustomAttribute(typeof(TModel).GetProperty(propertyName), typeof(CareHomeMock.Helper.DetailedDisplayAttribute));
        if (detailedAttr != null)
        {
            placeholder = detailedAttr.Placeholder;
            readOnly = detailedAttr.Readonly;
        }

        // Generates HTML.
        var label = html.LabelFor(expr, new { @class = "control-label col-md-2" });
        object htmlAttributes = new { @class = "", placeholder = placeholder };
        if (readOnly)
            htmlAttributes = new { @class = "", placeholder = placeholder, @readonly = "readonly" };
        MvcHtmlString editor;
        editor = html.CheckBoxFor(expr, htmlAttributes);
        var validationMessage = html.ValidationMessageFor(expr);
        
        return TheThingToDo(label, editor, validationMessage, description);
    }
    
    public static HelperResult EditorFor<TModel, TItem>(HtmlHelper<TModel> html, Expression<Func<TModel, TItem>> expr, EditorType? editorType = null)
    {
        // Gets property name.
        var propertyName = expr.GetPropertyName();
        
        // Gets description and placeholder.
        var description = "";
        var placeholder = "";
        bool readOnly = false;
        var displayAttr = (System.ComponentModel.DataAnnotations.DisplayAttribute)Attribute.GetCustomAttribute(typeof(TModel).GetProperty(propertyName), typeof(System.ComponentModel.DataAnnotations.DisplayAttribute));
        if(displayAttr != null)
            description = displayAttr.Description;
        var detailedAttr = (CareHomeMock.Helper.DetailedDisplayAttribute)Attribute.GetCustomAttribute(typeof(TModel).GetProperty(propertyName), typeof(CareHomeMock.Helper.DetailedDisplayAttribute));
        if (detailedAttr != null)
        {
            placeholder = detailedAttr.Placeholder;
            readOnly = detailedAttr.Readonly;
        }
        
        // Generates HTML.
        var label = html.LabelFor(expr, new { @class = "control-label col-md-2" });
        object htmlAttributes = new { @class = "form-control", placeholder = placeholder };
        if(readOnly)
            htmlAttributes = new { @class = "form-control", placeholder = placeholder, @readonly = "readonly" };
        MvcHtmlString editor;
        switch (editorType)
        {
            case EditorType.Date:
                editor = html.TextBoxFor(expr, "{0:yyyy/MM/dd}", htmlAttributes);
                break;

            case EditorType.TextBox:
            default:
                editor = html.TextBoxFor(expr, htmlAttributes);
                break;
                
            case EditorType.TextArea:
                editor = html.TextAreaFor(expr, htmlAttributes);
                break;
                
            case EditorType.DropDownList:
                //editor = html.DropDownListFor(expr, null, htmlAttributes);
                editor = html.DropDownList(propertyName, null, htmlAttributes);
                break;
                
            case EditorType.Raty:
                editor = new MvcHtmlString(string.Format("<div class=\"raty\">{0}</div>", html.HiddenFor(expr, htmlAttributes)));
                break;
        }
        var validationMessage = html.ValidationMessageFor(expr);
        
        // Calls view helper.
        return TheThingToDo(label, editor, validationMessage, description);
    }
}
@helper TheThingToDisplay(MvcHtmlString label, MvcHtmlString display, string description, MvcHtmlString hidden)
{
    <div class="form-group">
        @label
        <div class="col-md-10">
            @if (!string.IsNullOrEmpty(description))
            {
                <span>@description</span>
            }
            @display
            @hidden
        </div>
    </div>
}
@helper TheThingToDisplayText(MvcHtmlString label, string display, string description, MvcHtmlString hidden)
{
    <div class="form-group">
        @label
        <div class="col-md-10">
            @if (!string.IsNullOrEmpty(description))
            {
                <span>@description</span>
            }
            @display
            @hidden
        </div>
    </div>
}
@helper TheThingToDo(MvcHtmlString label, MvcHtmlString textbox, MvcHtmlString validationMessage, string description)
{
    <div class="form-group">
        @label
        <div class="col-md-10">
            @if (!string.IsNullOrEmpty(description))
            {
                <span>@description</span>
            }
            @textbox
            @validationMessage
        </div>
    </div>
}

@helper MainImage(string fileName, int maxWidth, int maxHeight, bool link = false)
{
    var url = new System.Web.Mvc.UrlHelper(Context.Request.RequestContext);
    if (!string.IsNullOrEmpty(fileName))
    {
        if (link)
        {
            <a href="@url.Action("Download", "MediaFile", new { fileName = fileName })" target="_blank">
                <img src="@url.Action("Download", "MediaFile", new { fileName = fileName, maxWidth = maxWidth, maxHeight = maxHeight })" />
            </a>
        }
        else
        {
            <img src="@url.Action("Download", "MediaFile", new { fileName = fileName, maxWidth = maxWidth, maxHeight = maxHeight })" />
        }
    }
    else
    {
        <span>画像が登録されていません。</span>
    }
}

